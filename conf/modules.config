/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: SPLITFASTQ {
        cpus   = { check_max( params.fastqsplitter_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.fastqsplitter_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.fastqsplitter_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.fastqsplitter_args == null ? " -c 6 " : params.fastqsplitter_args}
    }
    
    withName: ALIGNANDSORT {
        cpus   = { check_max( params.align_sort_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.align_sort_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.align_sort_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.bwa_args = { params.bwa_args == null ? " -v 3 -Y " : params.bwa_args}
        ext.bamsormadup_args = { params.bamsormadup_args == null ? " inputformat=sam  outputformat=bam  optminpixeldif=2500 " : params.bamsormadup_args}
        
    }
    

    withName: MERGEBAMS  {
        cpus   = { check_max( params.merge_bams_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.merge_bams_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.merge_bams_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.merge_bams_args == null ? " " : params.merge_bams_args}

    }

    withName: HAPLOTYPECALLER  {
        cpus   = { check_max( params.haplotypecaller_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.haplotypecaller_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.haplotypecaller_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.haplotypecaller_args == null ? " -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation -stand-call-conf 15.0  -GQB 5 -GQB 10 -GQB 15 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60  -ERC GVCF " : params.haplotypecaller_args}
        ext.java_options = { params.haplotypecaller_java_options == null ? " " : params.haplotypecaller_java_options}
    }

    withName: MERGEVCFS  {
        cpus   = { check_max( params.mergevcfs_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max(  ( params.mergevcfs_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        time = { check_max(  ( params.mergevcfs_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.mergevcfs_args == null ? " " : params.mergevcfs_args}
        ext.java_options = { params.mergevcfs_java_options == null ? "-Xmx8000m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:ParallelGCThreads=2" : params.mergevcfs_java_options}
    
        publishDir = [
            path: { "${params.outdir}/vcfs" },
            mode: params.publish_dir_mode
        ]
    }
}
